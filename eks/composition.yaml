apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks-cluster
  labels:
    crossplane.io/xrd: ekscluster.zicong.com
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: zicong.com/v1alpha1
    kind: EksCluster
  resources:
  - name: iamrole-controlplane
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      metadata:
        labels:
          role: controlplane
      spec:
        forProvider:
          description: "testing role for crossplane"
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "eks.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
  - name: iamattachment-controlplane
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      metadata:
        labels:
          access: public
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              role: controlplane
  - name: iamattachment-service
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              role: controlplane
  - name: ekscontrolplane
    base:
      apiVersion: eks.aws.crossplane.io/v1beta1
      kind: Cluster
      spec:
        forProvider:
          version: "1.25"
          resourcesVpcConfig:
            endpointPublicAccess: true
            subnetIdSelector:
              matchControllerRef: false
              matchLabels:
                access: public
          roleArnSelector:
            matchControllerRef: true
            matchLabels:
              role: controlplane
        writeConnectionSecretToRef:
          name: cluster-conn
          namespace: default
    patches:
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.identity.oidc.issuer
      toFieldPath: status.odicIssuerUrl
    - fromFieldPath: spec.parameters.k8sVersion
      toFieldPath: spec.forProvider.version
    - fromFieldPath: metadata.uid
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-ekscluster"
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.annotations[crossplane.io/external-name]
      toFieldPath: status.clusterName
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.controlPlaneStatus
    - fromFieldPath: spec.writeConnectionSecretToRef.namespace
      toFieldPath: spec.writeConnectionSecretToRef.namespace
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE
    connectionDetails:
    - fromConnectionSecretKey: kubeconfig
  - name: iamrole-nodegroup
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      metadata:
        labels:
          role: nodegroup
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "ec2.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
  - name: iamattachment-worker
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
  - name: iamattachment-cni
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
  - name: iamattachment-registry
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        providerConfigRef:
          name: default-aws
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
  - name: eksnodegroup
    base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: NodeGroup
      spec:
        forProvider:
          clusterNameSelector:
            matchControllerRef: true
          nodeRoleSelector:
            matchControllerRef: true
            matchLabels:
              role: nodegroup
          subnetSelector:
            matchLabels:
              access: public
          scalingConfig:
            minSize: 3
            maxSize: 5
            desiredSize: 3
          instanceTypes:
          - t3.small
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
